import{_ as t,a as o,b as l}from"./virtu_arch3-d42fa25a.js";import{_ as r,M as c,p,q as d,R as n,t as e,N as i,a1 as s}from"./framework-96b046e1.js";const u="/learning-2024-devops/assets/docker70-ba8e66aa.png",m="/learning-2024-devops/assets/cargo2docker-0934af83.png",v="/learning-2024-devops/assets/dockerarch-8b0ca0cf.png",g="/learning-2024-devops/assets/vmvscontainer-e95f81e3.png",h="/learning-2024-devops/assets/mixed-a2e3942d.png",k="/learning-2024-devops/assets/registry-243be279.png",b="/learning-2024-devops/assets/docker-compose-f26c227a.png",f="/learning-2024-devops/assets/exercise_docker-e312deff.png",y={},x=s('<h1 id="containerization" tabindex="-1"><a class="header-anchor" href="#containerization" aria-hidden="true">#</a> Containerization</h1><h2 id="definition" tabindex="-1"><a class="header-anchor" href="#definition" aria-hidden="true">#</a> Definition</h2><p>Containerization involves encapsulating applications and their dependencies into containers, allowing for efficient and consistent deployment across different environments. Containers package software in a portable, self-sufficient unit, ensuring isolation and enabling seamless deployment.</p><p>Objectives :</p><ul><li>Stop the « it works on my machine » syndrom</li><li>Be the link between dev and ops</li></ul><h2 id="an-old-history-70s" tabindex="-1"><a class="header-anchor" href="#an-old-history-70s" aria-hidden="true">#</a> An old history (70s)</h2><p><img src="'+u+'" alt="docker70s"></p><h3 id="what-is-it" tabindex="-1"><a class="header-anchor" href="#what-is-it" aria-hidden="true">#</a> What is it?</h3><ul><li>Software based on well known linux technologies</li><li>Yet another layers between software and hardware</li><li>Created to ease deployment of applications</li><li>Starting point: cargo transport</li></ul><h3 id="containers-for-softwares" tabindex="-1"><a class="header-anchor" href="#containers-for-softwares" aria-hidden="true">#</a> Containers… for softwares ?</h3><ul><li>As cargo container solved the problem of ethergenious transport mode, does software containers can solve</li></ul><p><img src="'+m+'" alt="cargo2docker"></p><h2 id="the-market" tabindex="-1"><a class="header-anchor" href="#the-market" aria-hidden="true">#</a> The market</h2><ul><li><code>LXC</code> (Linux Containers): Offers lightweight, operating-system-level virtualization, enabling multiple isolated Linux systems on a single host. rkt (Rocket): Focuses on security and composability, providing a security-focused container runtime as an alternative to Docker.</li><li><code>Docker</code>: A widely used container platform enabling building, shipping, and running applications in containers, known for its user-friendly interface and comprehensive tooling.</li><li><code>Podman</code>: Docker alternative allowing container management without a daemon, offering a Docker-compatible command-line interface.</li><li><code>LXD</code> (Linux Containers Next): A container hypervisor with a REST API to manage system containers, aiming for a more user-friendly container management experience.</li><li><code>Linux-VServer</code>: Provides lightweight virtualization for partitioning a single server into isolated containers for security and resource control.</li><li><code>VMware vSphere Integrated Containers</code> (VIC)&quot; for basic container deployment and management within VMware vSphere environments.</li></ul><h3 id="what-is-a-container" tabindex="-1"><a class="header-anchor" href="#what-is-a-container" aria-hidden="true">#</a> What is a container ?</h3><h2 id="history" tabindex="-1"><a class="header-anchor" href="#history" aria-hidden="true">#</a> History</h2><h3 id="in-the-dark-ages-one-application-on-one-physical-server" tabindex="-1"><a class="header-anchor" href="#in-the-dark-ages-one-application-on-one-physical-server" aria-hidden="true">#</a> In the Dark ages : One application on One physical server</h3><p><img src="'+t+'" alt="virtu1"></p><ul><li>Slow deployment times</li><li>Huge costs</li><li>Wasted resources</li><li>Difficult to scale</li><li>Difficult to migrate</li><li>Vendor lock in</li></ul><h3 id="then-virtualization-one-server-multiple-apps-in-vms" tabindex="-1"><a class="header-anchor" href="#then-virtualization-one-server-multiple-apps-in-vms" aria-hidden="true">#</a> Then, virtualization : One server, multiple apps in VMs</h3><p><img src="'+o+'" alt="virtu2"></p><ul><li>Better resource pooling : One physical machine divided into multiple virtual machines</li><li>Easier to scale</li><li>VMs in the cloud <ul><li>Rapid elasticity</li><li>Pay as you go model</li></ul></li></ul><p><img src="'+l+'" alt="virtu3"></p><h3 id="but-vms" tabindex="-1"><a class="header-anchor" href="#but-vms" aria-hidden="true">#</a> But VMs</h3><ul><li><p>Each VMs stills requires</p><ul><li>CPU allocation</li><li>Storage</li><li>RAM</li><li>An entire guest operating system</li></ul></li><li><p>The more VMs you run, the more resources you need</p></li><li><p>Guest OS means wasted resources</p></li><li><p>Application portability not guaranteed</p></li></ul><h3 id="containers" tabindex="-1"><a class="header-anchor" href="#containers" aria-hidden="true">#</a> Containers</h3><p><img src="'+v+'" alt="dockerarch"></p><ul><li>Standardized packaging for software and dependencies</li><li>Isolate apps from each other</li><li>Share the same OS kernel</li><li>Works with all major Linux and Windows distributions</li></ul><h3 id="benefits" tabindex="-1"><a class="header-anchor" href="#benefits" aria-hidden="true">#</a> Benefits</h3><ul><li>Speed : No OS to boot = applications online in a seconds</li><li>Portability : less dependencies between process layers = ability to move between infrastructure</li><li>Efficiency : less OS overhead</li><li>Improved VM density</li></ul><h3 id="virtual-machines-vs-containers" tabindex="-1"><a class="header-anchor" href="#virtual-machines-vs-containers" aria-hidden="true">#</a> Virtual Machines VS Containers ?</h3><p><img src="'+g+'" alt="vmvscontainer"></p><ul><li>Containers are an app level construct</li><li>VMs are an infrastructure level construct to turn one machine into many servers</li></ul><h3 id="mixed-architecture" tabindex="-1"><a class="header-anchor" href="#mixed-architecture" aria-hidden="true">#</a> Mixed architecture</h3><p><img src="'+h+'" alt="mixed"></p><ul><li>Containers and VMs together provide a tremendous amount of flexibility for IT to optimally deploy and managed apps</li></ul><h2 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h2><h3 id="history-1" tabindex="-1"><a class="header-anchor" href="#history-1" aria-hidden="true">#</a> History</h3><ul><li><p><strong>2004: Solaris containers and Zones technology introduced</strong></p></li><li><p><strong>2008: Linux containers (LXC1.0) introduced</strong></p></li><li><p><strong>2013: Initial Release</strong></p><ul><li>Salomon Hykes starts docker as an internal project within dotCloud company</li><li><em>June 2013:</em> Docker was released as an open-source project by dotCloud, revolutionizing application deployment through containers.</li></ul></li><li><p><strong>2014: Rapid Growth and Adoption</strong></p><ul><li><em>March 2014:</em> Docker 1.0 launched, gaining attention for its ease of use and portability.</li><li><em>June 2014:</em> DockerCon 2014 introduced Docker Hub, a cloud-based repository for sharing container images.</li></ul></li><li><p><strong>2015: Expansion and Tooling</strong></p><ul><li><em>April 2015:</em> Docker 1.6 brought multi-host networking for secure communication.</li><li><em>June 2015:</em> Docker Engine 1.7 introduced orchestration and scheduling tools.</li><li><em>November 2015:</em> Docker Engine 1.9 enhanced networking, storage, and security.</li></ul></li><li><p><strong>2016: Maturation and Enterprise Focus</strong></p><ul><li><em>February 2016:</em> Docker Engine 1.10 introduced secrets management.</li><li><em>June 2016:</em> Docker Datacenter launched for enterprise-scale container management.</li></ul></li><li><p><strong>2017: Further Enterprise Expansion</strong></p><ul><li><em>March 2017:</em> Docker Enterprise Edition (EE) consolidated Docker&#39;s commercial offering.</li><li><em>October 2017:</em> Docker EE 17.06 added Kubernetes support.</li></ul></li><li><p><strong>2018-2019: Continued Enhancements</strong></p><ul><li><em>May 2018:</em> Docker Desktop for Mac and Windows simplified local development.</li><li><em>April 2019:</em> Docker Desktop introduced Kubernetes support.</li></ul></li><li><p><strong>2020-Present: Focus on Developer Experience and Security</strong></p><ul><li><em>June 2020:</em> Docker 19.03 emphasized improved developer experiences.</li><li><em>2021-2022:</em> Docker continued refining security, enhancing developer tools, and optimizing performance.</li></ul></li></ul><h3 id="statistics" tabindex="-1"><a class="header-anchor" href="#statistics" aria-hidden="true">#</a> Statistics</h3><ul><li>Docker Hub hosts millions of container images, supported by a vast community.</li><li>Billions of downloads and adoption by millions of developers and enterprises globally.</li><li>Remains one of the most popular containerization platforms, pivotal in container technology adoption.</li></ul><p>Throughout its evolution, Docker transformed from a niche tool to a fundamental technology, driving container adoption due to its user-friendliness, portability, and ecosystem growth.</p><h3 id="inside-docker" tabindex="-1"><a class="header-anchor" href="#inside-docker" aria-hidden="true">#</a> Inside docker</h3>',43),_={href:"http://golang.org",target:"_blank",rel:"noopener noreferrer"},E=s(`<ul><li><strong>LibContainer</strong> (using LXC as plugin : Cgroup and Namespacing) providing : <ul><li><strong>Filesystem isolation</strong>: each process container runs in a completely separate root filesystem.</li><li><strong>Resource isolation</strong>: system resources like cpu and memory can be allocated differently to each process container, using cgroups.</li><li><strong>Network isolation</strong>: each process container runs in its own network namespace, with a virtual interface and IP address of its own.</li></ul></li><li><strong>Storage Backends</strong> (devicemapper, AUFS, BTRFS, …) providing : <ul><li><strong>Layered file system</strong>: root filesystems are created using “copy-on-write”, which makes deployment extremely fast, memory-cheap and disk-cheap.</li></ul></li></ul><h3 id="basic-usage" tabindex="-1"><a class="header-anchor" href="#basic-usage" aria-hidden="true">#</a> Basic usage</h3><p>Containerization platforms like Docker provide tools to create, deploy, and manage containers. Users can build containers from images, run them as instances, manage their lifecycle, and interact with them using container-specific commands.</p><ul><li><p><strong>Active Containers</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Output:</em></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CONTAINER ID   IMAGE         COMMAND       CREATED       STATUS       PORTS      NAMES
abcdef123456   my_container  &quot;/start.sh&quot;   1 hour ago    Up 1 hour   80/tcp     web_server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>List All Containers (Active and Inactive):</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Output:</em></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CONTAINER ID   IMAGE         COMMAND       CREATED        STATUS      PORTS       NAMES
abcdef123456   my_container  &quot;/start.sh&quot;   1 hour ago     Up 1 hour  80/tcp      web_server
12345abcde     my_image      &quot;/bin/bash&quot;   3 days ago     Exited (0)              my_container
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>List Images:</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>Pull an Image from a registry:</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NAME<span class="token punctuation">[</span>:TAG<span class="token operator">|</span>@DIGEST<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>Remove an Image:</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>IMAGE<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Create a Container from an Image:</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> create <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>Start a Running Container:</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Run a Container: ( create+start)</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE<span class="token punctuation">[</span>:TAG<span class="token operator">|</span>@DIGEST<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>Stop a Running Container:</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Remove a Container:</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Port Forwarding (Map Host Port to Container Port):</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> HOST_PORT:CONTAINER_PORT IMAGE_NAME
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Execute a Command in a Running Container:</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER COMMAND <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>View Container Logs:</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="custom-image-and-dockerfile" tabindex="-1"><a class="header-anchor" href="#custom-image-and-dockerfile" aria-hidden="true">#</a> Custom image and dockerFile</h3><h4 id="definition-1" tabindex="-1"><a class="header-anchor" href="#definition-1" aria-hidden="true">#</a> Definition</h4><p>A Docker image is a self-contained, immutable snapshot or template that includes an application&#39;s code, dependencies, and configuration, serving as the foundation to create and run containers.</p><h4 id="create-a-dockerfile" tabindex="-1"><a class="header-anchor" href="#create-a-dockerfile" aria-hidden="true">#</a> Create a dockerFile</h4><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># Base Image</span>
<span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>

<span class="token comment"># Maintainer Information</span>
<span class="token instruction"><span class="token keyword">LABEL</span> maintainer=<span class="token string">&quot;Your Name &lt;your@email.com&gt;&quot;</span></span>

<span class="token comment"># Install Necessary Packages</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; <span class="token operator">\\</span>
    apt-get install -y <span class="token operator">\\</span>
    package1 <span class="token operator">\\</span>
    package2</span>

<span class="token comment"># Set Working Directory</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>

<span class="token comment"># Copy Files/Directory to Container</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /app</span>

<span class="token comment"># Expose Ports</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span>

<span class="token comment"># Define Environment Variables</span>
<span class="token instruction"><span class="token keyword">ENV</span> ENV_VAR_NAME=value</span>

<span class="token comment"># Run Application</span>
<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">&quot;executable&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>FROM ubuntu:latest</code></li></ol><ul><li><strong><code>FROM</code></strong>: Specifies the base image for the new image being built.</li><li><strong><code>ubuntu:latest</code></strong>: Base image, in this case, Ubuntu, and <code>latest</code> tag referring to the most recent version.</li></ul><ol start="2"><li><code>LABEL maintainer=&quot;Your Name &lt;your@email.com&gt;&quot;</code></li></ol><ul><li><strong><code>LABEL</code></strong>: Adds metadata to the image.</li><li><strong><code>maintainer</code></strong>: Custom label key identifying the maintainer&#39;s information.</li></ul><ol start="3"><li><code>RUN apt-get update &amp;&amp; apt-get install -y package1 package2</code></li></ol><ul><li><strong><code>RUN</code></strong>: Executes commands within the container during the build process.</li><li><strong><code>apt-get update &amp;&amp; apt-get install -y package1 package2</code></strong>: Updates package lists and installs specified packages.</li></ul><ol start="4"><li><code>WORKDIR /app</code></li></ol><ul><li><strong><code>WORKDIR</code></strong>: Sets the working directory for subsequent commands in the Dockerfile.</li><li><strong><code>/app</code></strong>: Directory path within the container.</li></ul><ol start="5"><li><code>COPY . /app</code></li></ol><ul><li><strong><code>COPY</code></strong>: Copies files or directories from the host machine to the container.</li><li><strong><code>.</code></strong>: Represents the current directory on the host.</li><li><strong><code>/app</code></strong>: Destination directory in the container.</li></ul><ol start="6"><li><code>EXPOSE 80</code></li></ol><ul><li><strong><code>EXPOSE</code></strong>: Informs Docker that the container listens on specific network ports at runtime.</li><li><strong><code>80</code></strong>: Port number exposed by the container.</li></ul><ol start="7"><li><code>ENV ENV_VAR_NAME=value</code></li></ol><ul><li><strong><code>ENV</code></strong>: Sets environment variables inside the container.</li><li><strong><code>ENV_VAR_NAME=value</code></strong>: Name-value pair for an environment variable.</li></ul><ol start="8"><li><code>CMD [ &quot;executable&quot; ]</code></li></ol><ul><li><strong><code>CMD</code></strong>: Specifies the default command to be executed when a container starts.</li><li><strong><code>[ &quot;executable&quot; ]</code></strong>: Command and its arguments to run when the container starts.</li></ul><h4 id="building-and-pushing-an-image-to-docker-hub" tabindex="-1"><a class="header-anchor" href="#building-and-pushing-an-image-to-docker-hub" aria-hidden="true">#</a> Building and Pushing an Image to Docker Hub</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Build Docker Image</span>
<span class="token function">docker</span> build <span class="token parameter variable">-t</span> yourusername/repositoryname:tag <span class="token builtin class-name">.</span>

<span class="token comment"># Log in to Docker Hub (Enter your Docker Hub credentials)</span>
<span class="token function">docker</span> login

<span class="token comment"># Push Image to Docker Hub</span>
<span class="token function">docker</span> push yourusername/repositoryname:tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Replace placeholders:</p><ul><li><code>yourusername</code>: Your Docker Hub username.</li><li><code>repositoryname</code>: Name for your repository on Docker Hub.</li><li><code>tag</code>: Tag/version for your image (e.g., <code>latest</code>).</li></ul><h3 id="registry" tabindex="-1"><a class="header-anchor" href="#registry" aria-hidden="true">#</a> Registry</h3><p><img src="`+k+'" alt="registry"></p><p><code>Registries</code> store Docker <strong>images</strong>, acting as <strong>repositories</strong> where users can push, pull, and manage images. <code>Docker Hub</code> is a popular public registry, while private registries offer secure storage for proprietary or sensitive images within organizations.</p><h2 id="multi-container" tabindex="-1"><a class="header-anchor" href="#multi-container" aria-hidden="true">#</a> Multi-container</h2><p><img src="'+b+`" alt="docker-compose"></p><p>Docker Compose is a tool for defining and running multi-container Docker applications. It uses a YAML file (docker-compose.yml) to configure services, allowing users to define multiple containers, their configurations, networks, and volumes in a single file.</p><h3 id="docker-compose-yml-file" tabindex="-1"><a class="header-anchor" href="#docker-compose-yml-file" aria-hidden="true">#</a> docker-compose.yml file</h3><p>A Docker Compose file (<code>docker-compose.yml</code>) is used to define and run multi-container Docker applications. It&#39;s structured with key-value pairs and various keywords with YAML language defining each services</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">service1</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> imagename<span class="token punctuation">:</span>tag
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;host_port:container_port&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;host_path:container_path&quot;</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> KEY=VALUE
    <span class="token key atrule">command</span><span class="token punctuation">:</span> command_to_run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>version</code></strong>: Specifies the Docker Compose file version.</li><li><strong><code>services</code></strong>: Defines the services or containers to be created and run.</li><li><strong><code>image</code></strong>: Specifies the image to use for the service.</li><li><strong><code>ports</code></strong>: Maps ports from the host to the container.</li><li><strong><code>volumes</code></strong>: Mounts volumes from the host to the container.</li><li><strong><code>environment</code></strong>: Sets environment variables for the service.</li><li><strong><code>command</code></strong>: Overrides the default command for the service.</li></ul><h3 id="basic-commands" tabindex="-1"><a class="header-anchor" href="#basic-commands" aria-hidden="true">#</a> Basic commands</h3><ul><li><p><strong>Start Services Defined in <code>docker-compose.yml</code>:</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Start Services in Detached Mode:</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Stop Services:</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> down
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="exercises" tabindex="-1"><a class="header-anchor" href="#exercises" aria-hidden="true">#</a> Exercises</h2><h3 id="🧪-exercise-1-basic-commands" tabindex="-1"><a class="header-anchor" href="#🧪-exercise-1-basic-commands" aria-hidden="true">#</a> 🧪 Exercise 1 - Basic commands</h3><p>Pull HTTP apache server image from docker HUB and start your first web server containerized. Test it on your browser</p><details class="custom-container details"><summary>solution</summary><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Pull the Apache HTTP Server image from Docker Hub</span>
<span class="token function">docker</span> pull httpd

<span class="token comment"># Run the Apache HTTP Server container</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 httpd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="🧪-exercise-2-image-creation" tabindex="-1"><a class="header-anchor" href="#🧪-exercise-2-image-creation" aria-hidden="true">#</a> 🧪 Exercise 2 : Image creation</h3><p>Create your custom HTTP apache server image in a dockerfile Ubuntu based that is functionnal locally and you will push it to dockerHUB</p><details class="custom-container details"><summary>solution</summary><div class="language-Dockerfile line-numbers-mode" data-ext="Dockerfile"><pre class="language-Dockerfile"><code>FROM centos
RUN yum install httpd -y

ENTRYPOINT [&quot;/usr/sbin/httpd&quot;,&quot;-D&quot;,&quot;FOREGROUND&quot;]
EXPOSE 80
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="🧪-exercise-3-registry-management" tabindex="-1"><a class="header-anchor" href="#🧪-exercise-3-registry-management" aria-hidden="true">#</a> 🧪 Exercise 3 - Registry management</h3><p>Create your own repository to the registry DOCKER HUB and try to push a your docker HTTPD image to your registry</p><details class="custom-container details"><summary>solution</summary><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag <span class="token operator">&lt;</span>IMAGE_LOCAL_ID_OR_NAME<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>REPOSITORY_NAME_ON_DOCKER_HUB<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>IMAGE_NAME<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>TAG<span class="token operator">&gt;</span>
<span class="token function">docker</span> push <span class="token operator">&lt;</span>REPOSITORY_NAME_ON_DOCKER_HUB<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>IMAGE_NAME<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>TAG<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details>`,51),w={class:"custom-container tip"},D=n("p",{class:"custom-container-title"},"TIP",-1),O={href:"https://goharbor.io/",target:"_blank",rel:"noopener noreferrer"},A=s(`<h3 id="🧪-exercise-4-docker-compose-basics" tabindex="-1"><a class="header-anchor" href="#🧪-exercise-4-docker-compose-basics" aria-hidden="true">#</a> 🧪 Exercise 4 - Docker compose basics</h3><p>Convert your previous HTTPD image and container with a docker-compose.yml config</p><details class="custom-container details"><summary>solution</summary><p><em>docker-compose.yml</em></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>    
   <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;nginx:latest&#39;</span>
   <span class="token key atrule">ports</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> <span class="token string">&#39;80:80&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="🧪-exercise-5-practical-work" tabindex="-1"><a class="header-anchor" href="#🧪-exercise-5-practical-work" aria-hidden="true">#</a> 🧪 Exercise 5 - Practical work</h3><p><img src="`+f+`" alt="docker"></p><p>Create a LAMP achitecture with 2 computers over a WiFi network as follows with :</p><ul><li>an Apache / Nginx service</li><li>a PHP service</li><li>a mariaDB or MongoDB service</li><li>a PHPMyAdmin or mongo-express</li></ul><details class="custom-container details"><summary>solution</summary><p><em>docker-compose.yml</em></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>    
   <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;nginx:latest&#39;</span>
   <span class="token key atrule">ports</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> <span class="token string">&#39;127.0.0.1:80:80&#39;</span>
   <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> ./site<span class="token punctuation">:</span>/site
     <span class="token punctuation">-</span> ./site.conf<span class="token punctuation">:</span>/etc/nginx/conf.d/site.conf
   <span class="token key atrule">links</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> php
  <span class="token key atrule">php</span><span class="token punctuation">:</span>
   <span class="token key atrule">image</span><span class="token punctuation">:</span> php<span class="token punctuation">:</span>fpm
   <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> ./site<span class="token punctuation">:</span>/site
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;mysql:latest&#39;</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">&#39;--default-authentication-plugin=mysql_native_password&#39;</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">&#39;example&#39;</span>
      <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> <span class="token string">&#39;db&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>site.conf</em></p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>server {
    listen 80;
    index index.php index.html;
    server_name 127.0.0.1;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /site;    

    location ~ \\.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\\.php)(/.+)$;
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>site/index.php</em></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>My First Heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>My first paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;display_errors&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;display_startup_errors&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token variable">$mysqlClient</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;mysql:host=db;dbname=db;charset=utf8&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;example&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$mysqlClient</span><span class="token operator">-&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Connected successfully&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">PDOException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Connection failed: &quot;</span> <span class="token operator">.</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="custom-container tip"><p class="custom-container-title">PDO on php:fpm</p><p>Remember that you need to activate and install the PDO extension of your PHP container</p></div><h2 id="📖-further-reading" tabindex="-1"><a class="header-anchor" href="#📖-further-reading" aria-hidden="true">#</a> 📖 Further reading</h2><ul><li>De chroot à Docker, Podman, et maintenant les modules Wasm, 40 ans d&#39;évolution de la conteneurisation by Thomas SCHWENDER</li></ul>`,11),C=n("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/dikQOyAzdS4",title:"De chroot à Docker, Podman, et maintenant les modules Wasm, 40 ans d'évolution de la conteneurisation",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""},null,-1);function N(R,M){const a=c("ExternalLinkIcon");return p(),d("div",null,[x,n("p",null,[e("Written in "),n("a",_,[e("GO"),i(a)]),e(" Unique tool upon:")]),E,n("div",w,[D,n("p",null,[e("You can use other repository services such as "),n("a",O,[e("Harbor"),i(a)])])]),A,C])}const I=r(y,[["render",N],["__file","index.html.vue"]]);export{I as default};
